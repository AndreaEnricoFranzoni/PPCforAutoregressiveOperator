// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// PPC_KO
Rcpp::List PPC_KO(Rcpp::NumericMatrix X, std::string id_CV, double threshold_ppc, double alpha, int k, Rcpp::Nullable<std::string> id_rem_nan);
RcppExport SEXP _PPCKO_PPC_KO(SEXP XSEXP, SEXP id_CVSEXP, SEXP threshold_ppcSEXP, SEXP alphaSEXP, SEXP kSEXP, SEXP id_rem_nanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::string >::type id_CV(id_CVSEXP);
    Rcpp::traits::input_parameter< double >::type threshold_ppc(threshold_ppcSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type id_rem_nan(id_rem_nanSEXP);
    rcpp_result_gen = Rcpp::wrap(PPC_KO(X, id_CV, threshold_ppc, alpha, k, id_rem_nan));
    return rcpp_result_gen;
END_RCPP
}
// read_data_na
Rcpp::List read_data_na(Rcpp::NumericMatrix X);
RcppExport SEXP _PPCKO_read_data_na(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(read_data_na(X));
    return rcpp_result_gen;
END_RCPP
}
// test_lr
Rcpp::List test_lr(Rcpp::NumericMatrix X, Rcpp::NumericMatrix Y);
RcppExport SEXP _PPCKO_test_lr(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(test_lr(X, Y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PPCKO_PPC_KO", (DL_FUNC) &_PPCKO_PPC_KO, 6},
    {"_PPCKO_read_data_na", (DL_FUNC) &_PPCKO_read_data_na, 1},
    {"_PPCKO_test_lr", (DL_FUNC) &_PPCKO_test_lr, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_PPCKO(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
