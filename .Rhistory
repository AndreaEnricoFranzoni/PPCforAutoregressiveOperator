}
count_k[i] = counter
}
max_ind = max(which(count_k!=0)) + 1
k_count <- data.frame(
Number_PPCs = as.character(k_test[1:max_ind]),
Count = count_k[1:max_ind]
)
barchart_k = ggplot(k_count, aes(x = Number_PPCs, y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "PPC Prediction log-demand", x = "Number PPCs retained", y = "Count") +
theme_minimal()
print(barchart_k)
if(save_res){
title = "count_k_PPC_demand_log"
ggsave(filename = paste0(title,format_file),
plot = barchart_k,
device = NULL,
path = path_stor_res,
scale = 1,
width = 14,
height = 10,
dpi = 300)
}
## ----- boxplot expained power, offer predictions -----
dati <- data.frame(exp_pow = exp_pow_offer)
bp_exp_pow = ggplot(dati, aes(y = exp_pow)) +
geom_boxplot(fill = "lightblue") +
scale_y_continuous(limits = c(0.999, 1)) +
labs(title = "PPC log-offer predictions", y = "Explanatory power") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
print(bp_exp_pow)
if(save_res){
title = "exp_pow_PPC_offer_log"
ggsave(filename = paste0(title,format_file),
plot = bp_exp_pow,
device = NULL,
path = path_stor_res,
scale = 1,
width = 14,
height = 10,
dpi = 300)
}
## ----- boxplot expained power, demand predictions -----
dati <- data.frame(exp_pow = exp_pow_demand)
bp_exp_pow = ggplot(dati, aes(y = exp_pow)) +
geom_boxplot(fill = "lightblue") +
scale_y_continuous(limits = c(0.992, 1)) +
labs(title = "PPC log-demand predictions", y = "Explanatory power") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
print(bp_exp_pow)
if(save_res){
title = "exp_pow_PPC_demand_log"
ggsave(filename = paste0(title,format_file),
plot = bp_exp_pow,
device = NULL,
path = path_stor_res,
scale = 1,
width = 14,
height = 10,
dpi = 300)
}
rm(list=ls())
graphics.off()
cat("\014")
set.seed(23032000)
#if you want to save the result in a folder
save_res = TRUE
dir_w = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/Tesi/Functional_time_series_forecasting"
dir_res = paste0(dir_w,"/Test_domain1D/RealWorld_data/results")
rm(list=ls())
graphics.off()
cat("\014")
set.seed(23032000)
#if you want to save the result in a folder
save_res = TRUE
dir_w = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/Tesi/Functional_time_series_forecasting"
dir_res = paste0(dir_w,"/Test_domain1D/RealWorld_data/results")
#in which folder the result of the prediction are
path_res_pred = paste0(dir_res,"/results_prediction_log")
#where to store the results, in case (the images)
path_stor_res = paste0(paste0(dir_res,"/results_plot_predictions_log"))  #saving boxplots
format = ".png"
prediction_method = c("PPC", "KE", "KEI", "MP", "NP", "CC")
#load the files with the predictions
for (pred_met in prediction_method) {
files <- list.files(path = paste0(path_res_pred,paste0("/",pred_met)), full.names = TRUE)
for (file in files) {
load(file)
}
}
library("data.table")
library(ggplot2)
library(gridExtra)
library(patchwork)
h=1
offers <- data.frame( x = result_CONFORMAL[[h]]$Volumes_grid,
y = c(prediction_PPC_offer[[h]]$Prediction,
prediction_KE_offer[[h]]$Prediction,
prediction_KEI_offer[[h]]$Prediction,
prediction_MP_offer[[h]]$Prediction,
prediction_NP_offer[[h]]$Prediction,
result_CONFORMAL[[h]]$Prediction$predicted_p_cg_v,
result_CONFORMAL[[h]]$new_MGS_red_data$p_cg_v),
predictor = factor(rep(c(prediction_method,"Observed curve"), each = length(result_CONFORMAL[[h]]$Volumes_grid))))
offers <- data.frame( x = result_CONFORMAL_log[[h]]$Volumes_grid,
y = c(prediction_PPC_offer[[h]]$Prediction,
prediction_KE_offer[[h]]$Prediction,
prediction_KEI_offer[[h]]$Prediction,
prediction_MP_offer[[h]]$Prediction,
prediction_NP_offer[[h]]$Prediction,
result_CONFORMAL_log[[h]]$Prediction$predicted_p_cg_v,
result_CONFORMAL_log[[h]]$new_MGS_red_data$p_cg_v),
predictor = factor(rep(c(prediction_method,"Observed curve"), each = length(result_CONFORMAL[[h]]$Volumes_grid))))
offers <- data.frame( x = result_CONFORMAL_log[[h]]$Volumes_grid,
y = c(prediction_PPC_offer_log[[h]]$Prediction,
prediction_KE_offer_log[[h]]$Prediction,
prediction_KEI_offer_log[[h]]$Prediction,
prediction_MP_offer_log[[h]]$Prediction,
prediction_NP_offer_log[[h]]$Prediction,
result_CONFORMAL_log[[h]]$Prediction$predicted_p_cg_v,
result_CONFORMAL_log[[h]]$new_MGS_red_data$p_cg_v),
predictor = factor(rep(c(prediction_method,"Observed curve"), each = length(result_CONFORMAL_log[[h]]$Volumes_grid))))
ggplot(offers, aes(x = x, y = y, color = predictor)) +
geom_line(size = 1) +
labs(color = "Predictor") +
scale_color_manual(values = c("darkolivegreen1", "lightblue", "lightgreen", "orange", "red", "black","blue")) +
annotate("point", x = result_CONFORMAL[[h]]$`Quantity to be predicted`, y = result_CONFORMAL[[h]]$`Price to be predicted`, colour = "#030101",shape=4,size=5) +
theme_bw() +
labs(x='q [MWh]',y='p(q) [Euro/MWh]') +
ggtitle("Offer curve")+
theme_minimal() +
theme(legend.title = element_text(size = 12),
legend.text = element_text(size = 10))
ggplot(offers, aes(x = x, y = y, color = predictor)) +
geom_line(size = 1) +
labs(color = "Predictor") +
scale_color_manual(values = c("darkolivegreen1", "lightblue", "lightgreen", "orange", "red", "black","blue")) +
annotate("point", x = result_CONFORMAL_log[[h]]$`Quantity to be predicted`, y = result_CONFORMAL_log[[h]]$`Price to be predicted`, colour = "#030101",shape=4,size=5) +
theme_bw() +
labs(x='q [MWh]',y='p(q) [Euro/MWh]') +
ggtitle("Offer curve")+
theme_minimal() +
theme(legend.title = element_text(size = 12),
legend.text = element_text(size = 10))
ggplot(offers, aes(x = x, y = y, color = predictor)) +
geom_line(size = 1) +
labs(color = "Predictor") +
scale_color_manual(values = c("darkolivegreen1", "lightblue", "lightgreen", "orange", "red", "black","blue")) +
annotate("point", x = result_CONFORMAL_log[[h]]$`Quantity to be predicted`, y = result_CONFORMAL_log[[h]]$`Price to be predicted`, colour = "#030101",shape=4,size=5) +
theme_bw() +
labs(x='q [MWh]',y='log(p(q)) [log(Euro/MWh)]') +
ggtitle("Offer log-curve")+
theme_minimal() +
theme(legend.title = element_text(size = 12),
legend.text = element_text(size = 10))
demands <- data.frame( x = result_CONFORMAL_log[[h]]$Volumes_grid,
y = c(prediction_PPC_demand_log[[h]]$Prediction,
prediction_KE_demand_log[[h]]$Prediction,
prediction_KEI_demand_log[[h]]$Prediction,
prediction_MP_demand_log[[h]]$Prediction,
prediction_NP_demand_log[[h]]$Prediction,
result_CONFORMAL_log[[h]]$Prediction$predicted_p_cg_a,
result_CONFORMAL_log[[h]]$new_MGS_red_data$p_cg_a),
predictor = factor(rep(c(prediction_method,"Observed curve"), each = length(result_CONFORMAL_log[[h]]$Volumes_grid))))
ggplot(demands, aes(x = x, y = y, color = predictor)) +
geom_line(size = 1) +
labs(color = "Predictor") +
scale_color_manual(values = c("darkolivegreen1", "lightblue", "lightgreen", "orange", "red", "black","blue")) +
annotate("point", x = result_CONFORMAL_log[[h]]$`Quantity to be predicted`, y = result_CONFORMAL_log[[h]]$`Price to be predicted`, colour = "#030101",shape=4,size=5) +
theme_bw() +
labs(x='q [MWh]',y='log(p(q)) [log(Euro/MWh)]') +
ggtitle("Demand log-curve") +
theme_minimal() +
theme(legend.title = element_text(size = 12),
legend.text = element_text(size = 10))
PPC_plt <- data.frame( x = result_CONFORMAL_log[[h]]$Volumes_grid,
y = c(prediction_PPC_offer_log[[h]]$Prediction,
prediction_PPC_demand_log[[h]]$Prediction,
result_CONFORMAL_log[[h]]$new_MGS_red_data$p_cg_v,
result_CONFORMAL_log[[h]]$new_MGS_red_data$p_cg_a),
curve = factor(rep(c("Offer pred","Demand pred","Offer obs","Demand obs"), each = length(result_CONFORMAL[[h]]$Volumes_grid))))
PPC_plt <- data.frame( x = result_CONFORMAL_log[[h]]$Volumes_grid,
y = c(prediction_PPC_offer_log[[h]]$Prediction,
prediction_PPC_demand_log[[h]]$Prediction,
result_CONFORMAL_log[[h]]$new_MGS_red_data$p_cg_v,
result_CONFORMAL_log[[h]]$new_MGS_red_data$p_cg_a),
curve = factor(rep(c("Offer pred","Demand pred","Offer obs","Demand obs"), each = length(result_CONFORMAL_log[[h]]$Volumes_grid))))
ggplot(PPC_plt, aes(x = x, y = y, color = curve)) +
geom_line(size = 1) +
labs(color = " ") +
scale_color_manual(values = c("lightblue","blue","lightgreen","purple")) +
annotate("point", x = result_CONFORMAL_log[[h]]$`Quantity to be predicted`, y = result_CONFORMAL_log[[h]]$`Price to be predicted`, colour = "#030101",shape=4,size=5) +
theme_bw() +
labs(x='q [MWh]',y='p(q) [Euro/MWh]') +
ggtitle("PPC forecast") +
theme_minimal() +
theme(legend.title = element_text(size = 12),
legend.text = element_text(size = 10))
plot_PPC_ov = ggplot(PPC_plt, aes(x = x, y = y, color = curve)) +
geom_line(size = 1) +
labs(color = " ") +
scale_color_manual(values = c("lightblue","blue","lightgreen","purple")) +
annotate("point", x = result_CONFORMAL_log[[h]]$`Quantity to be predicted`, y = result_CONFORMAL_log[[h]]$`Price to be predicted`, colour = "#030101",shape=4,size=5) +
theme_bw() +
labs(x='q [MWh]',y='log(p(q)) [log(Euro/MWh)]') +
ggtitle("PPC forecast, log-curves") +
theme_minimal() +
theme(legend.title = element_text(size = 12),
legend.text = element_text(size = 10))
ggplot(PPC_plt, aes(x = x, y = y, color = curve)) +
geom_line(size = 1) +
labs(color = " ") +
scale_color_manual(values = c("lightblue","blue","lightgreen","purple")) +
annotate("point", x = result_CONFORMAL_log[[h]]$`Quantity to be predicted`, y = result_CONFORMAL_log[[h]]$`Price to be predicted`, colour = "#030101",shape=4,size=5) +
theme_bw() +
labs(x='q [MWh]',y='log(p(q)) [log(Euro/MWh)]') +
ggtitle("PPC forecast, log-curves") +
theme_minimal() +
theme(legend.title = element_text(size = 12),
legend.text = element_text(size = 10))
title = paste("Day ", result_CONFORMAL_log[[h]]$`Position day to be predicted`, " - ", as.Date(result_CONFORMAL_log[[h]]$`Day predicted`))
plot_offer + plot_demand  + plot_layout(nrow = 2, ncol = 1, widths = c(3, 1)) + plot_annotation(title = title)
plot_offer = ggplot(offers, aes(x = x, y = y, color = predictor)) +
geom_line(size = 1) +
labs(color = "Predictor") +
scale_color_manual(values = c("darkolivegreen1", "lightblue", "lightgreen", "orange", "red", "black","blue")) +
annotate("point", x = result_CONFORMAL_log[[h]]$`Quantity to be predicted`, y = result_CONFORMAL_log[[h]]$`Price to be predicted`, colour = "#030101",shape=4,size=5) +
theme_bw() +
labs(x='q [MWh]',y='log(p(q)) [log(Euro/MWh)]') +
ggtitle("Offer log-curve")+
theme_minimal() +
theme(legend.title = element_text(size = 12),
legend.text = element_text(size = 10))
offers <- data.frame( x = result_CONFORMAL_log[[h]]$Volumes_grid,
y = c(prediction_PPC_offer_log[[h]]$Prediction,
prediction_KE_offer_log[[h]]$Prediction,
prediction_KEI_offer_log[[h]]$Prediction,
prediction_MP_offer_log[[h]]$Prediction,
prediction_NP_offer_log[[h]]$Prediction,
result_CONFORMAL_log[[h]]$Prediction$predicted_p_cg_v,
result_CONFORMAL_log[[h]]$new_MGS_red_data$p_cg_v),
predictor = factor(rep(c(prediction_method,"Observed curve"), each = length(result_CONFORMAL_log[[h]]$Volumes_grid))))
plot_offer = ggplot(offers, aes(x = x, y = y, color = predictor)) +
geom_line(size = 1) +
labs(color = "Predictor") +
scale_color_manual(values = c("darkolivegreen1", "lightblue", "lightgreen", "orange", "red", "black","blue")) +
annotate("point", x = result_CONFORMAL_log[[h]]$`Quantity to be predicted`, y = result_CONFORMAL_log[[h]]$`Price to be predicted`, colour = "#030101",shape=4,size=5) +
theme_bw() +
labs(x='q [MWh]',y='log(p(q)) [log(Euro/MWh)]') +
ggtitle("Offer log-curve")+
theme_minimal() +
theme(legend.title = element_text(size = 12),
legend.text = element_text(size = 10))
demands <- data.frame( x = result_CONFORMAL_log[[h]]$Volumes_grid,
y = c(prediction_PPC_demand_log[[h]]$Prediction,
prediction_KE_demand_log[[h]]$Prediction,
prediction_KEI_demand_log[[h]]$Prediction,
prediction_MP_demand_log[[h]]$Prediction,
prediction_NP_demand_log[[h]]$Prediction,
result_CONFORMAL_log[[h]]$Prediction$predicted_p_cg_a,
result_CONFORMAL_log[[h]]$new_MGS_red_data$p_cg_a),
predictor = factor(rep(c(prediction_method,"Observed curve"), each = length(result_CONFORMAL_log[[h]]$Volumes_grid))))
plot_demand = ggplot(demands, aes(x = x, y = y, color = predictor)) +
geom_line(size = 1) +
labs(color = "Predictor") +
scale_color_manual(values = c("darkolivegreen1", "lightblue", "lightgreen", "orange", "red", "black","blue")) +
annotate("point", x = result_CONFORMAL_log[[h]]$`Quantity to be predicted`, y = result_CONFORMAL_log[[h]]$`Price to be predicted`, colour = "#030101",shape=4,size=5) +
theme_bw() +
labs(x='q [MWh]',y='log(p(q)) [log(Euro/MWh)]') +
ggtitle("Demand log-curve") +
theme_minimal() +
theme(legend.title = element_text(size = 12),
legend.text = element_text(size = 10))
PPC_plt <- data.frame( x = result_CONFORMAL_log[[h]]$Volumes_grid,
y = c(prediction_PPC_offer_log[[h]]$Prediction,
prediction_PPC_demand_log[[h]]$Prediction,
result_CONFORMAL_log[[h]]$new_MGS_red_data$p_cg_v,
result_CONFORMAL_log[[h]]$new_MGS_red_data$p_cg_a),
curve = factor(rep(c("Offer pred","Demand pred","Offer obs","Demand obs"), each = length(result_CONFORMAL_log[[h]]$Volumes_grid))))
plot_PPC_ov = ggplot(PPC_plt, aes(x = x, y = y, color = curve)) +
geom_line(size = 1) +
labs(color = " ") +
scale_color_manual(values = c("lightblue","blue","lightgreen","purple")) +
annotate("point", x = result_CONFORMAL_log[[h]]$`Quantity to be predicted`, y = result_CONFORMAL_log[[h]]$`Price to be predicted`, colour = "#030101",shape=4,size=5) +
theme_bw() +
labs(x='q [MWh]',y='log(p(q)) [log(Euro/MWh)]') +
ggtitle("PPC forecast, log-curves") +
theme_minimal() +
theme(legend.title = element_text(size = 12),
legend.text = element_text(size = 10))
title = paste("Day ", result_CONFORMAL_log[[h]]$`Position day to be predicted`, " - ", as.Date(result_CONFORMAL_log[[h]]$`Day predicted`))
plot_offer + plot_demand  + plot_layout(nrow = 2, ncol = 1, widths = c(3, 1)) + plot_annotation(title = title)
plot_final = plot_offer + plot_demand  + plot_layout(nrow = 2, ncol = 1, widths = c(3, 1)) + plot_annotation(title = title)
path_stor_res
rm(list=ls())
graphics.off()
cat("\014")
set.seed(23032000)
#if you want to save the result in a folder
save_res = TRUE
dir_w = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/Tesi/Functional_time_series_forecasting"
dir_res = paste0(dir_w,"/Test_domain1D/RealWorld_data/results")
#in which folder the result of the prediction are
path_res_pred = paste0(dir_res,"/results_prediction_log")
#where to store the results, in case (the images)
path_stor_res = paste0(paste0(dir_res,"/results_plot_predictions_log"))  #saving boxplots
format = ".png"
prediction_method = c("PPC", "KE", "KEI", "MP", "NP", "CC")
#load the files with the predictions
for (pred_met in prediction_method) {
files <- list.files(path = paste0(path_res_pred,paste0("/",pred_met)), full.names = TRUE)
for (file in files) {
load(file)
}
}
library("data.table")
library(ggplot2)
library(gridExtra)
library(patchwork)
#############################
##saving offers predictions##
#############################
number_of_predictions = 184
for (h in 1:number_of_predictions){
offers <- data.frame( x = result_CONFORMAL_log[[h]]$Volumes_grid,
y = c(prediction_PPC_offer_log[[h]]$Prediction,
prediction_KE_offer_log[[h]]$Prediction,
prediction_KEI_offer_log[[h]]$Prediction,
prediction_MP_offer_log[[h]]$Prediction,
prediction_NP_offer_log[[h]]$Prediction,
result_CONFORMAL_log[[h]]$Prediction$predicted_p_cg_v,
result_CONFORMAL_log[[h]]$new_MGS_red_data$p_cg_v),
predictor = factor(rep(c(prediction_method,"Observed curve"), each = length(result_CONFORMAL_log[[h]]$Volumes_grid))))
plot_offer = ggplot(offers, aes(x = x, y = y, color = predictor)) +
geom_line(size = 1) +
labs(color = "Predictor") +
scale_color_manual(values = c("darkolivegreen1", "lightblue", "lightgreen", "orange", "red", "black","blue")) +
annotate("point", x = result_CONFORMAL_log[[h]]$`Quantity to be predicted`, y = result_CONFORMAL_log[[h]]$`Price to be predicted`, colour = "#030101",shape=4,size=5) +
theme_bw() +
labs(x='q [MWh]',y='log(p(q)) [log(Euro/MWh)]') +
ggtitle("Offer log-curve")+
theme_minimal() +
theme(legend.title = element_text(size = 12),
legend.text = element_text(size = 10))
demands <- data.frame( x = result_CONFORMAL_log[[h]]$Volumes_grid,
y = c(prediction_PPC_demand_log[[h]]$Prediction,
prediction_KE_demand_log[[h]]$Prediction,
prediction_KEI_demand_log[[h]]$Prediction,
prediction_MP_demand_log[[h]]$Prediction,
prediction_NP_demand_log[[h]]$Prediction,
result_CONFORMAL_log[[h]]$Prediction$predicted_p_cg_a,
result_CONFORMAL_log[[h]]$new_MGS_red_data$p_cg_a),
predictor = factor(rep(c(prediction_method,"Observed curve"), each = length(result_CONFORMAL_log[[h]]$Volumes_grid))))
plot_demand = ggplot(demands, aes(x = x, y = y, color = predictor)) +
geom_line(size = 1) +
labs(color = "Predictor") +
scale_color_manual(values = c("darkolivegreen1", "lightblue", "lightgreen", "orange", "red", "black","blue")) +
annotate("point", x = result_CONFORMAL_log[[h]]$`Quantity to be predicted`, y = result_CONFORMAL_log[[h]]$`Price to be predicted`, colour = "#030101",shape=4,size=5) +
theme_bw() +
labs(x='q [MWh]',y='log(p(q)) [log(Euro/MWh)]') +
ggtitle("Demand log-curve") +
theme_minimal() +
theme(legend.title = element_text(size = 12),
legend.text = element_text(size = 10))
PPC_plt <- data.frame( x = result_CONFORMAL_log[[h]]$Volumes_grid,
y = c(prediction_PPC_offer_log[[h]]$Prediction,
prediction_PPC_demand_log[[h]]$Prediction,
result_CONFORMAL_log[[h]]$new_MGS_red_data$p_cg_v,
result_CONFORMAL_log[[h]]$new_MGS_red_data$p_cg_a),
curve = factor(rep(c("Offer pred","Demand pred","Offer obs","Demand obs"), each = length(result_CONFORMAL_log[[h]]$Volumes_grid))))
plot_PPC_ov = ggplot(PPC_plt, aes(x = x, y = y, color = curve)) +
geom_line(size = 1) +
labs(color = " ") +
scale_color_manual(values = c("lightblue","blue","lightgreen","purple")) +
annotate("point", x = result_CONFORMAL_log[[h]]$`Quantity to be predicted`, y = result_CONFORMAL_log[[h]]$`Price to be predicted`, colour = "#030101",shape=4,size=5) +
theme_bw() +
labs(x='q [MWh]',y='log(p(q)) [log(Euro/MWh)]') +
ggtitle("PPC forecast, log-curves") +
theme_minimal() +
theme(legend.title = element_text(size = 12),
legend.text = element_text(size = 10))
title = paste("Day ", result_CONFORMAL_log[[h]]$`Position day to be predicted`, " - ", as.Date(result_CONFORMAL_log[[h]]$`Day predicted`))
plot_final = plot_offer + plot_demand  + plot_layout(nrow = 2, ncol = 1, widths = c(3, 1)) + plot_annotation(title = title)
if(save_res){
ggsave(filename = paste0(paste(title,"_curves_log"),format),
plot = plot_final,
device = NULL,
path = paste0(path_stor_res,"/curves_log"),
scale = 1,
width = NA,
height = NA,
dpi = 300)
ggsave(filename = paste0(paste(title,"_PPC_pred_log"),format),
plot = plot_PPC_ov,
device = NULL,
path = paste0(path_stor_res,"/PPC_forecast_log"),
scale = 1,
width = NA,
height = NA,
dpi = 300)
}
}
rm(list=ls())
graphics.off()
cat("\014")
set.seed(23032000)
library(PPCKO)
#change here
dir_w = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/Tesi/Functional_time_series_forecasting"
load(paste0(dir_w,"/Test_domain1D/RealWorld_data/utils/data/MGS_cg_260419_310120_data.Rdata"))
#if you want to store results
save_res = TRUE
dir_res = "/Test_domain1D/RealWorld_data/results"
name_folder_res = "/results_next_instant_forecast_log"
path_stor_res = paste0(paste0(dir_w,dir_res),name_folder_res)
{
x_grid_dim         <- 401
x_grid             <- MGS_cg_260419_310120_data$x_axis[1:x_grid_dim]
left_extreme       <- min(x_grid)
right_extreme      <- max(x_grid)
tot_time_instants  <- length(MGS_cg_260419_310120_data$y_axis)
offers_dataset     <- matrix(data = NA, nrow = x_grid_dim, ncol = tot_time_instants)
demands_dataset    <- matrix(data = NA, nrow = x_grid_dim, ncol = tot_time_instants)
for (i in 1:tot_time_instants) {
offers_dataset[,i]  <-  log(MGS_cg_260419_310120_data$y_axis[[i]][[2]][1:x_grid_dim])
demands_dataset[,i] <-  log(MGS_cg_260419_310120_data$y_axis[[i]][[3]][1:x_grid_dim])
}
first_prediction <- 98
}
## -----offers-----
# check hp
hp_offer = KO_check_hps(offers_dataset)
# forecasting
PPC_pred_offer = PPC_KO( X = offers_dataset,
id_CV = "CV",
disc_ev = x_grid,
left_extreme = left_extreme,
right_extreme = right_extreme)
# show results
KO_show_results(PPC_pred_offer,hp_offer,x_lab="Quantity [MWh]", y_lab = "Log price offer [log(Euro/MWh)]")
if(save_res){
save(PPC_pred_offer, file = paste0(path_stor_res,"/prediction_PPC_offer_log.Rdata"))
save(hp_offer, file = paste0(path_stor_res,"/hp_PPC_offer_log.Rdata"))
}
## -----demands-----
# check hp
hp_demand = KO_check_hps(demands_dataset)
# forecasting
PPC_pred_demand = PPC_KO( X = demands_dataset,
id_CV = "CV",
disc_ev = x_grid,
left_extreme = left_extreme,
right_extreme = right_extreme)
# show results
KO_show_results(PPC_pred_demand,hp_demand,x_lab="Quantity [MWh]", y_lab = "Log price demand [log(Euro/MWh])")
if(save_res){
save(PPC_pred_demand, file = paste0(path_stor_res,"/prediction_PPC_demand_log.Rdata"))
save(hp_demand, file = paste0(path_stor_res,"/hp_PPC_demand_log.Rdata"))
}
remove.packages("PPCKO")
devtools::install_github("AndreaEnricoFranzoni/PPCforAutoregressiveOperator", dependencies = TRUE,force = TRUE)
devtools::test()
data(data_1d)
data(data_2d)
{
id_CV = "NoCV"
alpha = 0.1
k = 2
alphas = c(0.001,0.01,0.1,2)
ks = c(1,2,3,4)
err_r = 1
x1_d = 10
x2_d = 10
}
t = PPC_KO(X=data_1d, id_CV = "CV_alpha",k=2, ex_solver = FALSE )
library(PPCKO)
data(data_1d)
data(data_2d)
{
id_CV = "NoCV"
alpha = 0.1
k = 2
alphas = c(0.001,0.01,0.1,2)
ks = c(1,2,3,4)
err_r = 1
x1_d = 10
x2_d = 10
}
t = PPC_KO(X=data_1d, id_CV = "CV_alpha",k=2, ex_solver = FALSE )
test_1d_hp = KO_check_hps(data_1d)
test_1d_algo = PPC_KO(data_1d,id_CV = id_CV, alpha = alpha, k = k, alpha_vec = alphas, k_vec = ks, err_ret = err_r)
test = PPC_KO_gen_solv(data_1d,id_CV = id_CV, alpha = alpha, k = k, alpha_vec = alphas, k_vec = ks, err_ret = err_r)
KO_show_results(test_1d_algo,test_1d_hp)
devtools::test()
library(devtools)
devtools::install_github("AndreaEnricoFranzoni/PPCforAutoregressiveOperator", dependencies = TRUE,force = TRUE)
devtools::test()
remove.packages("PPCKO")
library(devtools)
devtools::install_github("AndreaEnricoFranzoni/PPCforAutoregressiveOperator", dependencies = TRUE,force = TRUE)
devtools::test()
library(devtools)
devtools::install_github("AndreaEnricoFranzoni/PPCforAutoregressiveOperator", dependencies = TRUE,force = TRUE)
devtools::test()
remove.packages("PPCKO")
library(devtools)
devtools::install_github("AndreaEnricoFranzoni/PPCforAutoregressiveOperator", dependencies = TRUE,force = TRUE)
