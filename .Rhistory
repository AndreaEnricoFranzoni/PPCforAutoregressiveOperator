for (i in 1:B) {
perm = sample(1:n, replace = F)
sample_perm = sample_pooled[perm]
sample_perm1 = sample_perm[1:n1]
sample_perm2 = sample_perm[(n1+1):n]
t_perm[i] = abs((mean(sample_perm2)-delta)-mean(sample_perm1))
}
pval = sum(t_perm>=t0)/B
return(pval)
}
pValues_1 = numeric(length(delta.grid))
for (i in delta.grid) {
pValues_1[i]=single_test(votes.pre,votes.post,delta.grid[i],B)
}
sample(1:23)
sample(1:23,replace = F)
single_test=function (data1,data2,delta,B){
mu_1 = mean(data1)
mu_2 = mean(data2) - delta
t0 = abs(mu_2 - mu_1)
sample_pooled = rbind(data1,data2)
n = length(sample_pooled)
n1= length(data1)
t_perm = numeric(B)
for (i in 1:B) {
sample_perm = sample(sample_pooled, replace = F)
sample_perm1 = sample_perm[1:n1]
sample_perm2 = sample_perm[(n1+1):n]
t_perm[i] = abs((mean(sample_perm2)-delta)-mean(sample_perm1))
}
pval = sum(t_perm>=t0)/B
return(pval)
}
pValues_1 = numeric(length(delta.grid))
for (i in delta.grid) {
pValues_1[i]=single_test(votes.pre,votes.post,delta.grid[i],B)
}
library(Rcpp)
RcppEigen::RcppEigen.package.skeleton("project_test")
RcppEigen.package.skeleton("project_test")
install.packages("RcppEigen")
install.packages("RcppEigen")
install.packages("RcppEigen")
install.packages("RcppEigen")
X = matrix(c(1,6,3,4,9,6,7,12,9,10,15,12),4,3)
X
X = matrix(c(1,4,7,10,6,9,12,15,3,6,9,12),4,3)
X
gamma = tcrossprod(X)
gamma
gamma = gamma/3
F = tcrossprod(X[,2:3],X[,1:2])
F
F = F/2
F_2 = crossprod(F)
F_2 = t(F)*F
F_""
F_2
I = diag(ones(4),4,4)
I = diag(c(1,1,1,1),4,4)
I
alpha = 0.75
gamma_alpha = gamma + alpha*I
gamma
gamma_alpha
eig = eigen(gamma_alpha)
eig_val = eig$values
eig_val
sum(eig_val)
eig_val_norm = eig_val/sum(eig_val)
eig_val_norm
eig_vec = eig$vectors
eig_vec_ret = eig_vec[,1]
eig_vec_ret
eig_vec_ret = as.matrix(eig_vec_ret)
View(eig_vec_ret)
eig_vec_ret
L_alpha = 1/sqrt(eig_val[1])
L_alpha
gamma_alpha_sq_rt_inv = eig_vec_ret%*%L_alpha%*%t(eig_vec_ret)
gamma_alpha_sq_rt_inv
phi = gamma_alpha_sq_rt_inv%*%F_2%*%gamma_alpha_sq_rt_inv
eig_phi = eigen(phi)
eig_val_phi = eig_phi$values
eig_vec_phi = eig_phi$vectors
V = eig_vec_phi[,1]
rho = F%*%gamma_alpha_sq_rt_inv%*%V%*%t(V)%*%gamma_alpha_sq_rt_inv
rho
a = gamma_alpha_sq_rt_inv*V
a = gamma_alpha_sq_rt_inv%*%V
b = F%*%gamma_alpha_sq_rt_inv%*%V
rho_c = a%*%t(b)
rho
rho_c
X = matrix(c(1,4,7,10,6,9,12,15,3,6,9,12),4,3)
means = colMeans(X)
x_norm = X - means
x_norm
gamma = tcrossprod(X)
gamma
gamma = tcrossprod(x_norm)
gamma
means = rowMeans(X)
x_norm = X - means
x_norm
gamma = tcrossprod(x_norm)
gamma
gamma = tcrossprod(x_norm)/3
gamma
F = tcrossprod(X[,2:3],X[,1:2])/2
F
F = tcrossprod(X[,2:3],X[,1:2])
F
F = tcrossprod(x_norm[,2:3],x_norm[,1:2])
F = F/2
F
F_2 = t(F)*F
F_2
I = diag(c(1,1,1,1),4,4)
gamma_alpha = gamma + alpha*I
alpha = 0.75
gamma_alpha = gamma + alpha*I
gamma_alpha
eig = eigen(gamma_alpha)
eig_val = eig$values
eig_val
eig_val_norm = eig_val/sum(eig_val)
eig_val_norm
0.8868715 + 0.0377095 + 0.0377095
0.8868715 + 0.0377095
eig_vec = eig$vectors
eig_vec
eig_vec_ret = eig_vec[,1:3]
eig_vec_ret
L.alpha <- diag(1/sqrt(eig_val[1:3]))
L.alpha
W.alpha = matrix(eig_vec_ret)
W.alpha = matrix(eig_vec_ret,4,3)
W.alpha
gamma_alpha_inv_sq_rt = W.alpha%*%L.alpha%*%t(W.alpha)
gamma_alpha_inv_sq_rt
phi = gamma_alpha_sq_rt_inv%*%F_2%*%gamma_alpha_sq_rt_inv
phi = gamma_alpha_inv_sq_rt%*%F_2%*%gamma_alpha_inv_sq_rt
phi
> eig_phi = eigen(phi) eig_val_phi = eig_phi$values
eig_phi = eigen(phi)
eig_vals_phi = eig_phi$values
eig_vc_phi = eig_phi$vectors
eig_vals_phi
eig_vc_phi
eig_vc_phi_ret = eig_vc_phi[,1:3]
eig_vc_phi_ret
rho = F%*%gamma_alpha_sq_rt_inv%*%V%*%t(V)%*%gamma_alpha_sq_rt_inv
rho = F%*%gamma_alpha_inv_sq_rt%*%V%*%t(V)%*%gamma_alpha_inv_sq_rt
V = eig_vc_phi_ret
rho = F%*%gamma_alpha_inv_sq_rt%*%V%*%t(V)%*%gamma_alpha_inv_sq_rt
rho
a = gamma_alpha_sq_rt_inv%*%
fe
a = gamma_alpha_sq_rt_inv%*%V
a = gamma_alpha_inv_sq_rt%*%V
a
b = gamma_alpha_inv_sq_rt%*%V
b
a = F%*%b
a
rho_c = a%*%t(b)
rho_c
rho%*%x_norm[,3]
pred = rho%*%x_norm[,3] + means
pred
pred
PPCdiscretized_KO <- function(X, p.thresh=0.95, alpha=NULL, K=NULL)
{
n <- dim(X)[2]
TT <- dim(X)[1] # number of measurements points (of sampling points on the functional domain)
# row.means <- rowMeans(X)
# X <- X - row.means
## Estimation of the covariance and its inverse over the subspace spanned by the first
## K eigenvectors
autocov <- tcrossprod(X)/n
crosscov <- tcrossprod(X[,2:n], X[,1:(n-1)])/(n-1)
if(is.null(alpha)){
alpha <- 0.75
}
Gamma1_2 <- t(crosscov) %*% crosscov
Gamma0 <- autocov + alpha*diag(TT)
eigendecB <- eigen(Gamma0)
lambda.alpha <- eigendecB$values
W.alpha <- eigendecB$vectors
p <- head(which(cumsum(lambda.alpha)/sum(lambda.alpha)>=p.thresh),n=1)
if(p>1){L.alpha <- diag(1/sqrt(lambda.alpha[1:p]))}else{L.alpha <- 1/sqrt(lambda.alpha)[1]}
W.alpha <- matrix(W.alpha[,1:p], nrow=dim(W.alpha)[1], ncol=p)
sqGamma0.inv <- W.alpha %*% L.alpha %*% t(W.alpha)
Phi <- sqGamma0.inv %*% Gamma1_2 %*% sqGamma0.inv
eigendec <- eigen(Phi)
V1 <- eigendec$vectors
D1 <- eigendec$values
V1 <- V1[,order(D1, decreasing=TRUE)]
D1 <- sort(D1, decreasing=TRUE)
if(is.null(K)){
K <- p
}
Vhat1 <- V1[,1:K]
Dhat1 <- D1[1:K]
VVT <- Vhat1 %*% t(Vhat1)
Psi.hat <- crosscov %*% sqGamma0.inv %*% VVT %*% sqGamma0.inv
return(Psi.hat)
}
rho_fun = PPCdiscretized_KO(X)
rho_fun
rho_fun%*%X
rho_fun%*%X[,3]
rho
rho_fun
rho%*%X
rho%*%X[,3]
rho%*%X[,3] + means
rho%*%x_norm[,3] + means
X = matrix(c(1,4,7,10,6,9,12,15,3,6,9,12),4,3)
means = rowMeans(X)
x_norm = X - means
gamma = tcrossprod(x_norm)/3
F = tcrossprod(x_norm[,2:3],x_norm[,1:2])/2
F_2 = t(F)*F
I = diag(c(1,1,1,1),4,4)
alpha = 0.75
gamma_alpha = gamma + alpha*I
eig = eigen(gamma_alpha)
eig_val = eig$values
eig_val
eig_val_norm = eig_val/sum(eig_val)
eig_val_norm
p=3
eig_vec = eig$vectors
eig_vec
eig_vec_ret = eig_vec[,1:p]
eig_vec_ret
L.alpha <- diag(1/sqrt(eig_val[1:p]))
L.alpha
W.alpha = matrix(eig_vec_ret,4,3)
W.alpha
gamma_alpha_inv_sq_rt = W.alpha%*%L.alpha%*%t(W.alpha)
phi = gamma_alpha_inv_sq_rt%*%F_2%*%gamma_alpha_inv_sq_rt
eig_phi = eigen(phi)
V = eig_phi$vectors[,1:p]
rho = F%*%gamma_alpha_inv_sq_rt%*%V%*%t(V)%*%gamma_alpha_inv_sq_rt
b = gamma_alpha_inv_sq_rt%*%V
a = F%*%b
rho_c = a%*%t(b)
pred = rho%*%x_norm[,3] + means
rho
rho_c
PPCdiscretized_KO <- function(X, p.thresh=0.95, alpha=NULL, K=NULL)
{
n <- dim(X)[2]
TT <- dim(X)[1] # number of measurements points (of sampling points on the functional domain)
# row.means <- rowMeans(X)
X <- X - row.means
## Estimation of the covariance and its inverse over the subspace spanned by the first
## K eigenvectors
autocov <- tcrossprod(X)/n
crosscov <- tcrossprod(X[,2:n], X[,1:(n-1)])/(n-1)
if(is.null(alpha)){
alpha <- 0.75
}
Gamma1_2 <- t(crosscov) %*% crosscov
Gamma0 <- autocov + alpha*diag(TT)
eigendecB <- eigen(Gamma0)
lambda.alpha <- eigendecB$values
W.alpha <- eigendecB$vectors
p <- head(which(cumsum(lambda.alpha)/sum(lambda.alpha)>=p.thresh),n=1)
if(p>1){L.alpha <- diag(1/sqrt(lambda.alpha[1:p]))}else{L.alpha <- 1/sqrt(lambda.alpha)[1]}
W.alpha <- matrix(W.alpha[,1:p], nrow=dim(W.alpha)[1], ncol=p)
sqGamma0.inv <- W.alpha %*% L.alpha %*% t(W.alpha)
Phi <- sqGamma0.inv %*% Gamma1_2 %*% sqGamma0.inv
eigendec <- eigen(Phi)
V1 <- eigendec$vectors
D1 <- eigendec$values
V1 <- V1[,order(D1, decreasing=TRUE)]
D1 <- sort(D1, decreasing=TRUE)
if(is.null(K)){
K <- p
}
Vhat1 <- V1[,1:K]
Dhat1 <- D1[1:K]
VVT <- Vhat1 %*% t(Vhat1)
Psi.hat <- crosscov %*% sqGamma0.inv %*% VVT %*% sqGamma0.inv
return(Psi.hat)
}
rho_fun = PPCdiscretized_KO(X)
PPCdiscretized_KO <- function(X, p.thresh=0.95, alpha=NULL, K=NULL)
{
n <- dim(X)[2]
TT <- dim(X)[1] # number of measurements points (of sampling points on the functional domain)
row.means <- rowMeans(X)
X <- X - row.means
## Estimation of the covariance and its inverse over the subspace spanned by the first
## K eigenvectors
autocov <- tcrossprod(X)/n
crosscov <- tcrossprod(X[,2:n], X[,1:(n-1)])/(n-1)
if(is.null(alpha)){
alpha <- 0.75
}
Gamma1_2 <- t(crosscov) %*% crosscov
Gamma0 <- autocov + alpha*diag(TT)
eigendecB <- eigen(Gamma0)
lambda.alpha <- eigendecB$values
W.alpha <- eigendecB$vectors
p <- head(which(cumsum(lambda.alpha)/sum(lambda.alpha)>=p.thresh),n=1)
if(p>1){L.alpha <- diag(1/sqrt(lambda.alpha[1:p]))}else{L.alpha <- 1/sqrt(lambda.alpha)[1]}
W.alpha <- matrix(W.alpha[,1:p], nrow=dim(W.alpha)[1], ncol=p)
sqGamma0.inv <- W.alpha %*% L.alpha %*% t(W.alpha)
Phi <- sqGamma0.inv %*% Gamma1_2 %*% sqGamma0.inv
eigendec <- eigen(Phi)
V1 <- eigendec$vectors
D1 <- eigendec$values
V1 <- V1[,order(D1, decreasing=TRUE)]
D1 <- sort(D1, decreasing=TRUE)
if(is.null(K)){
K <- p
}
Vhat1 <- V1[,1:K]
Dhat1 <- D1[1:K]
VVT <- Vhat1 %*% t(Vhat1)
Psi.hat <- crosscov %*% sqGamma0.inv %*% VVT %*% sqGamma0.inv
return(Psi.hat)
}
rho_fun = PPCdiscretized_KO(X)
rho_fun
rho_fun*x_norm[,3]
rho_fun%*%x_norm[,3]
pred_fun = rho_fun%*%x_norm[,3]  + means
pred_fun
load("~/Documents/Politecnico/Magistrale/Tesi/Dati_CampiFlegrei/DATA/decumulated_temporal_sequence.RData")
library(fda)
data <- t(CanadianWeather$dailyAv[,,1])     #temperature daily
View(data)
library(Rcpp)
library(RcppEigen)
#change here the directory
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local")
#installing the package
Rcpp::compileAttributes("PPCKO")
devtools::install("PPCKO")
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local")
#functions
source("far_1_generation/requirements.R")
source("far_1_generation/far_1.R")
source("far_1_generation/functions.R")
source("far_1_generation/prediction_error.R")
## Parameters --------------------------------------------------------------------------
n <- 100                  #quante iterazioni si fanno in tutto per FAR(1)
burnin <- 50              #burnin iterazioni nel creare i FAR(1)
N <- n - burnin           #quelle che saranno le effettive iterazioni
#creazione griglia per il processo in [0,1]
t.grid <- seq(0,1, length.out=10)
s.grid <- seq(0,1, length.out=10)
grid <- expand.grid(t.grid, s.grid)
m = length(t.grid)
#costante del kernel affinchè abbia norma L2 di 0.5
a_sp_t  <- sqrt(3)/2
a_sp_s  <- sqrt(3)/2
a_id    <- 1/2
a_gauss <- (1/0.7468)*(1/2)
#costante del kernel affinchè abbia norma L2 di 0.8
#a_sp_t  <- sqrt(3)*4/5
#a_sp_s  <- sqrt(3)*4/5
#a_id    <- 4/5
#a_gauss <- (1/0.7468)*(4/5)
## Simulate the data
set.seed(23032000)
#sp t
X_sp_t = far_1(kernel_id = "sp_t", noise_id = "1", n = n, t.grid = t.grid, a = a_sp_t, burnin = burnin)
X_sp_t = as.matrix(X_sp_t)
data_used_sp_t = as.matrix(X_sp_t[,1:n-1])
exact_result_sp_t = X_sp_t[,n]
#sp s
X_sp_s = far_1(kernel_id = "sp_s", noise_id = "1", n = n, t.grid = t.grid, a = a_sp_s, burnin = burnin)
X_sp_s = as.matrix(X_sp_s)
data_used_sp_s = as.matrix(X_sp_s[,1:n-1])
exact_result_sp_s = X_sp_s[,n]
#identity
X_id = far_1(kernel_id = "identity", noise_id = "1", n = n, t.grid = t.grid, a = a_id, burnin = burnin)
X_id = as.matrix(X_id)
data_used_id = as.matrix(X_id[,1:n-1])
exact_result_id = X_id[,n]
#gaussian
X_gauss = far_1(kernel_id = "gaussian", noise_id = "1", n = n, t.grid = t.grid, a = a_gauss, burnin = burnin)
X_gauss = as.matrix(X_gauss)
data_used_gauss = as.matrix(X_gauss[,1:n-1])
exact_result_gauss = X_gauss[,n]
testing=PPCKO::PPC_KO( X = data_used_id,id_CV = "NoCV",id_p_for_k = "No",threshold_k = 0.95, k = 3)
library(Rcpp)
library(RcppEigen)
#change here the directory
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local")
#installing the package
Rcpp::compileAttributes("PPCKO")
devtools::install("PPCKO")
library(Rcpp)
library(RcppEigen)
#change here the directory
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local")
#installing the package
Rcpp::compileAttributes("PPCKO")
devtools::install("PPCKO")
testing=PPCKO::PPC_KO( X = data_used_id,id_CV = "NoCV",id_p_for_k = "No",threshold_k = 0.95, k = 3)
testing=PPCKO::PPC_KO( X = data_used_id,id_CV = "NoCV",id_p_for_k = "No",threshold_k = 0.95, k = 1)
library(Rcpp)
library(RcppEigen)
#change here the directory
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local")
#installing the package
Rcpp::compileAttributes("PPCKO")
devtools::install("PPCKO")
testing=PPCKO::PPC_KO( X = data_used_id,id_CV = "NoCV",id_p_for_k = "No",threshold_k = 0.95, k = 1)
View(testing)
library(Rcpp)
library(RcppEigen)
#change here the directory
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local")
#installing the package
Rcpp::compileAttributes("PPCKO")
devtools::install("PPCKO")
testing=PPCKO::PPC_KO( X = data_used_id,id_CV = "NoCV",id_p_for_k = "No",threshold_k = 0.95, k = 1)
testing$scores
testing=PPCKO::PPC_KO( X = data_used_id,id_CV = "NoCV",id_p_for_k = "No",threshold_k = 0.95, k = 3)
library(Rcpp)
library(RcppEigen)
#change here the directory
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local")
#installing the package
Rcpp::compileAttributes("PPCKO")
devtools::install("PPCKO")
testing=PPCKO::PPC_KO( X = data_used_id,id_CV = "NoCV",id_p_for_k = "No",threshold_k = 0.95, k = 3)
View(testing)
library(Rcpp)
library(RcppEigen)
#change here the directory
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local")
#installing the package
Rcpp::compileAttributes("PPCKO")
devtools::install("PPCKO")
testing=PPCKO::PPC_KO( X = data_used_id,id_CV = "NoCV",id_p_for_k = "No",threshold_k = 0.95, k = 3)
View(testing)
library(Rcpp)
library(RcppEigen)
#change here the directory
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local")
#installing the package
Rcpp::compileAttributes("PPCKO")
devtools::install("PPCKO")
testing=PPCKO::PPC_KO( X = data_used_id,id_CV = "NoCV",id_p_for_k = "No",threshold_k = 0.95, k = 3)
testing=PPCKO::PPC_KO( X = data_used_id,id_CV = "NoCV",id_p_for_k = "No",threshold_k = 0.95, k = 3)
View(testing)
library(Rcpp)
library(RcppEigen)
#change here the directory
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local")
#installing the package
Rcpp::compileAttributes("PPCKO")
devtools::install("PPCKO")
testing=PPCKO::PPC_KO( X = data_used_id,id_CV = "NoCV",id_p_for_k = "No",threshold_k = 0.95, k = 3)
View(testing)
library(Rcpp)
library(RcppEigen)
#change here the directory
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local")
#installing the package
Rcpp::compileAttributes("PPCKO")
devtools::install("PPCKO")
testing=PPCKO::PPC_KO( X = data_used_id,id_CV = "NoCV",id_p_for_k = "No",threshold_k = 0.95, k = 2)
library(Rcpp)
library(RcppEigen)
#change here the directory
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local")
#installing the package
Rcpp::compileAttributes("PPCKO")
devtools::install("PPCKO")
testing=PPCKO::PPC_KO( X = data_used_id,id_CV = "NoCV",id_p_for_k = "No",threshold_k = 0.95, k = 2)
View(testing)
#to uploda the packages
#change here the directory
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PACS/PPCforAutoregressiveOperator")
#to uploda the packages
#change here the directory
#setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PACS/PPCforAutoregressiveOperator")
#then
Rcpp::compileAttributes(".")
library(Rcpp)
library(RcppEigen)
library(devtools)
devtools::install_github("AndreaEnricoFranzoni/PPCforAutoregressiveOperator", force = TRUE)
#to uploda the packages
#change here the directory
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PACS/PPCforAutoregressiveOperator")
#then
Rcpp::compileAttributes(".")
library(Rcpp)
library(RcppEigen)
library(devtools)
devtools::install_github("AndreaEnricoFranzoni/PPCforAutoregressiveOperator", force = TRUE)
#to uploda the packages
#change here the directory
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PACS/PPCforAutoregressiveOperator")
#then
Rcpp::compileAttributes(".")
library(Rcpp)
library(RcppEigen)
library(devtools)
devtools::install_github("AndreaEnricoFranzoni/PPCforAutoregressiveOperator", force = TRUE)
