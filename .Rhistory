err.dEKI_rn    <- numeric(N)
err.dFAR1Co_en <- numeric(N)     #FAR-Concurrent:
err.dFAR1Co_rn <- numeric(N)
err.dFAR1VA_en <- numeric(N)     #FAR-VAr:
err.dFAR1VA_rn <- numeric(N)
err.perf_en    <- numeric(N)     #EX:  exact (oracle) prediction
err.perf_rn    <- numeric(N)
err.mean_en    <- numeric(N)     #MP:  mean prediction
err.mean_rn    <- numeric(N)
err.naive_en   <- numeric(N)     #NP:  naive prediction
err.naive_rn   <- numeric(N)
}
# simulations others
counter <- 0
total_iterations <- length(sample_size_vec)
err_sim_KO_scattered_CV_en = numeric(total_iterations)
err_sim_KO_scattered_CV_rn = numeric(total_iterations)
i = 1
sample_size = sample_size_vec[i]
l = l_vec[i]
seeds = (nsim*(i-1)+1)
## simulate data ----
out <- far_1_2D(n = sample_size+new_sample_size,
Psi = Psi,
x1.grid = x1.grid,
x2.grid = x2.grid,
nbasis.1 = nbasis.1.sim,
nbasis.2 = nbasis.2.sim,
burnin = burnin,
sigma = my_Sigma,
basis.type = basis.type)
# list of matrices: data
Xt = out$Xt
Xt_piece1 = list()
Xt_piece2 = list()
Xt_piece3 = list()
Xt_piece4 = list()
for (j in 1:(length(Xt)-1)) {
Xt_piece1 = c(Xt_piece1,list(Xt[[j]][1:10,1:10]))
Xt_piece2 = c(Xt_piece2,list(Xt[[j]][1:10,11:21]))
Xt_piece3 = c(Xt_piece3,list(Xt[[j]][11:21,1:10]))
Xt_piece4 = c(Xt_piece4,list(Xt[[j]][11:21,11:21]))
}
temp = PPCKO::data_2d_wrapper_from_list(Xt)
id_CV="NoCV"
temp1 = PPCKO::data_2d_wrapper_from_list(Xt_piece1)
res1  = PPCKO::PPC_KO_2d(X = temp1,
id_CV = id_CV,
threshold_ppc = threshold_ppc,
num_disc_ev_x1 = 10,
num_disc_ev_x2 = 10)
temp2 = PPCKO::data_2d_wrapper_from_list(Xt_piece2)
res2  = PPCKO::PPC_KO_2d(X = temp2,
id_CV = id_CV,
threshold_ppc = threshold_ppc,
num_disc_ev_x1 = 10,
num_disc_ev_x2 = 11)
temp3 = PPCKO::data_2d_wrapper_from_list(Xt_piece3)
res3  = PPCKO::PPC_KO_2d(X = temp3,
id_CV = id_CV,
threshold_ppc = threshold_ppc,
num_disc_ev_x1 = 11,
num_disc_ev_x2 = 10)
temp4 = PPCKO::data_2d_wrapper_from_list(Xt_piece4)
res4  = PPCKO::PPC_KO_2d(X = temp4,
id_CV = id_CV,
threshold_ppc = threshold_ppc,
num_disc_ev_x1 = 11,
num_disc_ev_x2 = 11)
res_pred = matrix(nrow=21,ncol=21)
res_pred[1:10,1:10] = res1$`One-step ahead prediction`
res_pred[1:10,11:21] = res2$`One-step ahead prediction`
res_pred[11:21,1:10] = res3$`One-step ahead prediction`
res_pred[11:21,11:21] = res4$`One-step ahead prediction`
View(res_pred)
counter <- counter + 1
err_sim_KO_scattered_CV_en[i] = MLmetrics::MSE(res_pred,Xt[[sample_size+new_sample_size]])
err_sim_KO_scattered_CV_rn[i] = MLmetrics::MAE(res_pred,Xt[[sample_size+new_sample_size]])
rm(list=ls())
graphics.off()
cat("\014")
set.seed(23032000)
#change here
dir_w = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/Tesi/Functional_time_series"
source(paste0(dir_w,"/Test_domain2D/Artificial_data/far_1_2d.R"))
source(paste0(dir_w,"/Test_domain2D/Artificial_data/Point_Prediction/CP_point_prediction_2D_FAR_EK.R"))
source(paste0(dir_w,"/Test_domain2D/Artificial_data/Point_Prediction/CP_point_prediction_2D_FAR_oracle.R"))
source(paste0(dir_w,"/Test_domain2D/Artificial_data/Point_Prediction/CP_point_prediction_2D_FAR_VAR.R"))
source(paste0(dir_w,"/Test_domain2D/Artificial_data/Point_Prediction/CP_point_prediction_2D_FARp_oracle.R"))
source(paste0(dir_w,"/Test_domain2D/Artificial_data/functions_scen2sim.R"))
## Data parameters
sample_size_vec = seq(from=20,to=500,by=10)
N = length(sample_size_vec)
new_sample_size = 1 #dimension of test set (is 1)
burnin      <- 100
left_ex_x1  <- 0
right_ex_x1 <- 1
left_ex_x2  <- 0
right_ex_x2 <- 1
dim_grid_x1 <- 21
dim_grid_x2 <- 21
{
# grid on x1 and x2
x1.grid = seq(from=left_ex_x1, to=right_ex_x1, length=dim_grid_x1)
x2.grid = seq(from=left_ex_x2, to=right_ex_x2, length=dim_grid_x2)
# number of basis in each domain
nbasis.1.sim = 5
nbasis.2.sim = 5
# total number of tensor product basis
nbasis.sim = nbasis.1.sim*nbasis.2.sim
# type of basis
basis.type = "fourier"
# d = dimension of the underlying VAR(1)
d=nbasis.sim
Psi1=matrix(0.3,d,d)
diag(Psi1)=0.8
Psi1=Psi1/norm(Psi1, type = "F")*0.3
Psi=array(0,c(d,d,1))
Psi[,,1]=Psi1
my_Sigma=matrix(0.6,d,d)
diag(my_Sigma)=1
my_Sigma=my_Sigma/2
}
# CP algos parameters
{
b = 1
l_vec = 0.5*sample_size_vec
center = TRUE
detrend = FALSE
fitted_order = 1
FPCA_method = "discretization"
cum_prop_var = NULL
nharm = 4
nbasis.1 = NULL
nbasis.2 = NULL
nsim = 500
}
#PPCKO parameters
{
id_CV            <- "CV"
alpha            <- 0.1
k                <- 0
threshold_ppc    <- 0.95
alpha_vec        <- c(1e-4,1e-3,1e-2,1e-1,1,1e1,1e2)
k_vec            <- 1:20
toll             <- 1e-4
disc_ev_x1       <- NULL
disc_ev_x2       <- NULL
left_extreme_x1  <- left_ex_x1
right_extreme_x1 <- right_ex_x1
left_extreme_x2  <- left_ex_x2
right_extreme_x2 <- right_ex_x2
num_disc_ev_x1   <- dim_grid_x1
num_disc_ev_x2   <- dim_grid_x2
err_ret          <- 0
id_rem_nan       <- NULL
}
#errors vector
{
err.dPPC.KO_en <- numeric(N)     #PF:  Kargin-Onatski PPC
err.dPPC.KO_rn <- numeric(N)
alpha_used     <- numeric(N)
n_PPCs_ret     <- numeric(N)
err.dEK_en     <- numeric(N)     #EK:  Kokoszka Estimated Kernel
err.dEK_rn     <- numeric(N)
err.dEKI_en    <- numeric(N)     #EKI: Kokoszka Estimated Kernel Improved
err.dEKI_rn    <- numeric(N)
err.dFAR1Co_en <- numeric(N)     #FAR-Concurrent:
err.dFAR1Co_rn <- numeric(N)
err.dFAR1VA_en <- numeric(N)     #FAR-VAr:
err.dFAR1VA_rn <- numeric(N)
err.perf_en    <- numeric(N)     #EX:  exact (oracle) prediction
err.perf_rn    <- numeric(N)
err.mean_en    <- numeric(N)     #MP:  mean prediction
err.mean_rn    <- numeric(N)
err.naive_en   <- numeric(N)     #NP:  naive prediction
err.naive_rn   <- numeric(N)
}
# simulations others
counter <- 0
total_iterations <- length(sample_size_vec)
err_sim_KO_scattered_CV_en = numeric(total_iterations)
err_sim_KO_scattered_CV_rn = numeric(total_iterations)
for(i in 1:total_iterations){
sample_size = sample_size_vec[i]
l = l_vec[i]
seeds = (nsim*(i-1)+1)
## simulate data ----
out <- far_1_2D(n = sample_size+new_sample_size,
Psi = Psi,
x1.grid = x1.grid,
x2.grid = x2.grid,
nbasis.1 = nbasis.1.sim,
nbasis.2 = nbasis.2.sim,
burnin = burnin,
sigma = my_Sigma,
basis.type = basis.type)
# list of matrices: data
Xt = out$Xt
Xt_piece1 = list()
Xt_piece2 = list()
Xt_piece3 = list()
Xt_piece4 = list()
for (j in 1:(length(Xt)-1)) {
Xt_piece1 = c(Xt_piece1,list(Xt[[j]][1:10,1:10]))
Xt_piece2 = c(Xt_piece2,list(Xt[[j]][1:10,11:21]))
Xt_piece3 = c(Xt_piece3,list(Xt[[j]][11:21,1:10]))
Xt_piece4 = c(Xt_piece4,list(Xt[[j]][11:21,11:21]))
}
temp = PPCKO::data_2d_wrapper_from_list(Xt)
temp1 = PPCKO::data_2d_wrapper_from_list(Xt_piece1)
res1  = PPCKO::PPC_KO_2d(X = temp1,
id_CV = id_CV,
threshold_ppc = threshold_ppc,
num_disc_ev_x1 = 10,
num_disc_ev_x2 = 10)
temp2 = PPCKO::data_2d_wrapper_from_list(Xt_piece2)
res2  = PPCKO::PPC_KO_2d(X = temp2,
id_CV = id_CV,
threshold_ppc = threshold_ppc,
num_disc_ev_x1 = 10,
num_disc_ev_x2 = 11)
temp3 = PPCKO::data_2d_wrapper_from_list(Xt_piece3)
res3  = PPCKO::PPC_KO_2d(X = temp3,
id_CV = id_CV,
threshold_ppc = threshold_ppc,
num_disc_ev_x1 = 11,
num_disc_ev_x2 = 10)
temp4 = PPCKO::data_2d_wrapper_from_list(Xt_piece4)
res4  = PPCKO::PPC_KO_2d(X = temp4,
id_CV = id_CV,
threshold_ppc = threshold_ppc,
num_disc_ev_x1 = 11,
num_disc_ev_x2 = 11)
res_pred = matrix(nrow=21,ncol=21)
res_pred[1:10,1:10] = res1$`One-step ahead prediction`
res_pred[1:10,11:21] = res2$`One-step ahead prediction`
res_pred[11:21,1:10] = res3$`One-step ahead prediction`
res_pred[11:21,11:21] = res4$`One-step ahead prediction`
counter <- counter + 1
err_sim_KO_scattered_CV_en[i] = MLmetrics::MSE(res_pred,Xt[[sample_size+new_sample_size]])
err_sim_KO_scattered_CV_rn[i] = MLmetrics::MAE(res_pred,Xt[[sample_size+new_sample_size]])
message <- sprintf("Progress: %d/%d ", counter, total_iterations)
setTxtProgressBar(txtProgressBar(min = 0, max = total_iterations, style = 3), counter)
cat("\r", message)
}
err_sim_KO_scattered = list(en=err_sim_KO_scattered_CV_en,rn=err_sim_KO_scattered_CV_rn)
View(err_sim_KO_scattered)
file_saving_errors_sim_KO_Scattered = paste0(dir_w,"/Test_domain2D/Artificial_data/errors_sim_PPCKO_2d_scattered.Rdata")
save(err_sim_KO_scattered, file = file_saving_errors_sim_KO_Scattered)
file_saving_errors_sim_KO_Scattered = paste0(dir_w,"/Test_domain2D/Artificial_data/errors_sim_KO_2d_scattered.Rdata")
save(err_sim_KO_scattered, file = file_saving_errors_sim_KO_Scattered)
rm(err_sim_KO_scattered)
load("~/Documents/Politecnico/Magistrale/Tesi/Functional_time_series/Test_domain2D/Artificial_data/errors_sim_KO_2d_scattered.Rdata")
View(err_sim_KO_scattered)
err_sim_KO_scattered[["en"]]
err_sim_KO_scattered[["rn"]]
summary(err_sim_KO_scattered$en)
mean(err_sim_KO_scattered$en)
sd(err_sim_KO_scattered$en)
summary(err_sim_KO_scattered$rn)
mean(err_sim_KO_scattered$rn)
sd(err_sim_KO_scattered$rn)
# En boxplot
N = length(errors_sim_2d$oracle$en)
load("~/Documents/Politecnico/Magistrale/Tesi/Functional_time_series/Test_domain2D/Artificial_data/errors_sim_2d.Rdata")
load("~/Documents/Politecnico/Magistrale/Tesi/Functional_time_series/Test_domain2D/Artificial_data/errors_sim_PPCKO_2d.Rdata")
# En boxplot
N = length(errors_sim_2d$oracle$en)
err_en <- c(err_PPCKO$en,err_sim_KO_scattered$en,errors_sim_2d$EK$en,errors_sim_2d$EKI$en,errors_sim_2d$FAR1_Conc$en,errors_sim_2d$FAR1_Var$en,errors_sim_2d$mean$en,errors_sim_2d$naive$en,errors_sim_2d$oracle$en)
method <- rep(c("KO","KO_scat","EK","EKI", "Far1 Con", "Far1 VAR", "Mean", "Naive", "Oracle"), each=N)
En <- data.frame(method, err_en)
method_order<- c("KO","KO_scat","EK","EKI", "Far1 Con", "Far1 VAR", "Mean", "Naive", "Oracle")
En.box <- En %>% mutate(method=factor(x=method, levels=method_order))
pgplot <- ggplot(En.box, aes(x=method, y=err_en, fill=method)) +
geom_boxplot() + ggtitle("Preidction errors on 2d data")
pgplot <- pgplot +
theme_bw() +
labs(x="", y="En", fill = "Method") +
theme(plot.title = element_text(face="bold", hjust=0.5, size=22),
axis.title.x = element_blank(),
axis.text.y = element_text(size=22),
axis.title.y = element_text(size=22))
quartz()
print(pgplot)
{
title = "En_2d"
ggsave(filename = paste0(title,".pdf"),
plot = pgplot,
device = NULL,
path = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/Tesi/Functional_time_series/Test_domain2D/Artificial_data/results",
scale = 1,
width = 14,
height = 10,
dpi = 300)
}
# Rn boxplot
N = length(errors_sim_2d$oracle$en)
err_rn <- c(err_PPCKO$rn,err_sim_KO_scattered$rn,errors_sim_2d$EK$rn,errors_sim_2d$EKI$rn,errors_sim_2d$FAR1_Conc$rn,errors_sim_2d$FAR1_Var$rn,errors_sim_2d$mean$rn,errors_sim_2d$naive$rn,errors_sim_2d$oracle$rn)
method <- rep(c("KO","KO_scat","EK","EKI", "Far1 Con", "Far1 VAR", "Mean", "Naive", "Oracle"), each=N)
Rn <- data.frame(method, err_rn)
method_order<- c("KO","KO_scat","EK","EKI", "Far1 Con", "Far1 VAR", "Mean", "Naive", "Oracle")
Rn.box <- Rn %>% mutate(method=factor(x=method, levels=method_order))
pgplot <- ggplot(Rn.box, aes(x=method, y=err_rn, fill=method)) +
geom_boxplot() + ggtitle("Preidction errors on 2d data")
pgplot <- pgplot +
theme_bw() +
labs(x="", y="Rn", fill = "Method") +
theme(plot.title = element_text(face="bold", hjust=0.5, size=22),
axis.title.x = element_blank(),
axis.text.y = element_text(size=22),
axis.title.y = element_text(size=22))
quartz()
print(pgplot)
{
title = "Rn_2d"
ggsave(filename = paste0(title,".pdf"),
plot = pgplot,
device = NULL,
path = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/Tesi/Functional_time_series/Test_domain2D/Artificial_data/results",
scale = 1,
width = 14,
height = 10,
dpi = 300)
}
# PPC KO boxplot
N = length(err_sim_KO_scattered$rn)
err_ko <- c(err_PPCKO$en,err_sim_KO_scattered$en,err_PPCKO$rn,err_sim_KO_scattered$rn)
method <- rep(c("En KO","En KO_scat","Rn KO","Rn KO_scat"), each=N)
KO <- data.frame(method, err_ko)
method_order<- c("En KO","En KO_scat","Rn KO","Rn KO_scat")
KO.box <- KO %>% mutate(method=factor(x=method, levels=method_order))
pgplot <- ggplot(KO.box, aes(x=method, y=err_ko, fill=method)) +
geom_boxplot() + ggtitle("KO comparison")
pgplot <- pgplot +
theme_bw() +
labs(x="", y="Err", fill = "Method") +
theme(plot.title = element_text(face="bold", hjust=0.5, size=22),
axis.title.x = element_blank(),
axis.text.y = element_text(size=22),
axis.title.y = element_text(size=22))
quartz()
print(pgplot)
{
title = "KO_comp_2d"
ggsave(filename = paste0(title,".pdf"),
plot = pgplot,
device = NULL,
path = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/Tesi/Functional_time_series/Test_domain2D/Artificial_data/results",
scale = 1,
width = 14,
height = 10,
dpi = 300)
}
# PPC KO boxplot
N = length(err_sim_KO_scattered$rn)
err_ko_en <- c(err_PPCKO$en,err_sim_KO_scattered$en)
method <- rep(c("En KO","En KO_scat"), each=N)
KO_en <- data.frame(method, err_ko_en)
method_order<- c("En KO","En KO_scat")
KO_en.box <- KO_en %>% mutate(method=factor(x=method, levels=method_order))
pgplot <- ggplot(KO_en.box, aes(x=method, y=err_ko_en, fill=method)) +
geom_boxplot() + ggtitle("KO comparison")
pgplot <- pgplot +
theme_bw() +
labs(x="", y="Err", fill = "Method") +
theme(plot.title = element_text(face="bold", hjust=0.5, size=22),
axis.title.x = element_blank(),
axis.text.y = element_text(size=22),
axis.title.y = element_text(size=22))
quartz()
print(pgplot)
{
title = "KO_comp_2d"
ggsave(filename = paste0(title,".pdf"),
plot = pgplot,
device = NULL,
path = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/Tesi/Functional_time_series/Test_domain2D/Artificial_data/results",
scale = 1,
width = 14,
height = 10,
dpi = 300)
}
N = length(err_sim_KO_scattered$rn)
err_ko_en <- c(err_PPCKO$en,err_sim_KO_scattered$en)
method <- rep(c("En KO","En KO_scat"), each=N)
KO_en <- data.frame(method, err_ko_en)
method_order<- c("En KO","En KO_scat")
KO_en.box <- KO_en %>% mutate(method=factor(x=method, levels=method_order))
pgplot <- ggplot(KO_en.box, aes(x=method, y=err_ko_en, fill=method)) +
geom_boxplot() + ggtitle("KO comparison")
pgplot <- pgplot +
theme_bw() +
labs(x="", y="En", fill = "Method") +
theme(plot.title = element_text(face="bold", hjust=0.5, size=22),
axis.title.x = element_blank(),
axis.text.y = element_text(size=22),
axis.title.y = element_text(size=22))
quartz()
print(pgplot)
{
title = "KO_en_comp_2d"
ggsave(filename = paste0(title,".pdf"),
plot = pgplot,
device = NULL,
path = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/Tesi/Functional_time_series/Test_domain2D/Artificial_data/results",
scale = 1,
width = 14,
height = 10,
dpi = 300)
}
# PPC KO En boxplot
N = length(err_sim_KO_scattered$rn)
err_ko_en <- c(err_PPCKO$en,err_sim_KO_scattered$en)
method <- rep(c("KO","KO_scat"), each=N)
KO_en <- data.frame(method, err_ko_en)
method_order<- c("KO","KO_scat")
KO_en.box <- KO_en %>% mutate(method=factor(x=method, levels=method_order))
pgplot <- ggplot(KO_en.box, aes(x=method, y=err_ko_en, fill=method)) +
geom_boxplot() + ggtitle("KO comparison")
pgplot <- pgplot +
theme_bw() +
labs(x="", y="En", fill = "Method") +
theme(plot.title = element_text(face="bold", hjust=0.5, size=22),
axis.title.x = element_blank(),
axis.text.y = element_text(size=22),
axis.title.y = element_text(size=22))
quartz()
print(pgplot)
{
title = "KO_en_comp_2d"
ggsave(filename = paste0(title,".pdf"),
plot = pgplot,
device = NULL,
path = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/Tesi/Functional_time_series/Test_domain2D/Artificial_data/results",
scale = 1,
width = 14,
height = 10,
dpi = 300)
}
# PPCKO Rn boxplot
N = length(err_sim_KO_scattered$rn)
err_ko_rn <- c(err_PPCKO$rn,err_sim_KO_scattered$rn)
method <- rep(c("KO","KO_scat"), each=N)
KO_rn <- data.frame(method, err_ko_rn)
method_order<- c("KO","KO_scat")
KO_rn.box <- KO_rn %>% mutate(method=factor(x=method, levels=method_order))
pgplot <- ggplot(KO_rn.box, aes(x=method, y=err_ko_rn, fill=method)) +
geom_boxplot() + ggtitle("KO comparison")
pgplot <- pgplot +
theme_bw() +
labs(x="", y="Rn", fill = "Method") +
theme(plot.title = element_text(face="bold", hjust=0.5, size=22),
axis.title.x = element_blank(),
axis.text.y = element_text(size=22),
axis.title.y = element_text(size=22))
quartz()
print(pgplot)
{
title = "KO_rn_comp_2d"
ggsave(filename = paste0(title,".pdf"),
plot = pgplot,
device = NULL,
path = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/Tesi/Functional_time_series/Test_domain2D/Artificial_data/results",
scale = 1,
width = 14,
height = 10,
dpi = 300)
}
rm(list=ls())
graphics.off()
cat("\014")
library(RcppEigen)
library(devtools)
devtools::install_github("AndreaEnricoFranzoni/PPCforAutoregressiveOperator", force = TRUE)
devtools::test()
PPCKO::data(data_1d)
PPCKO::data(data_2d)
{
id_CV = "CV"
alpha = 0.5
k = 6
alphas = c(0.001,0.01,0.1,2)
ks = c(1,2,3,4)
err_r = 1
x1_d = 10
x2_d = 10
}
load("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PACS/pacs-project/PPCforAutoregressiveOperator/data/data_1d.rda"))
load("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PACS/pacs-project/PPCforAutoregressiveOperator/data/data_1d.rda")
test_1d_algo = PPCKO::PPC_KO(data_1d,id_CV = id_CV, alpha = alpha, k = k, alpha_vec = alphas, k_vec = ks, err_ret = err_r)
devtools::install_github("AndreaEnricoFranzoni/PPCforAutoregressiveOperator", force = TRUE)
test_1d_algo = PPCKO::PPC_KO(data_1d,id_CV = id_CV, alpha = alpha, k = k, alpha_vec = alphas, k_vec = ks, err_ret = err_r)
devtools::install_github("AndreaEnricoFranzoni/PPCforAutoregressiveOperator", force = TRUE)
devtools::test()
PPCKO::data(data_1d)
PPCKO::data(data_2d)
test_1d_hp = PPCKO::KO_check_hps(data_1d)
test_1d_algo = PPCKO::PPC_KO(data_1d,id_CV = id_CV, alpha = alpha, k = k, alpha_vec = alphas, k_vec = ks, err_ret = err_r)
PPCKO::KO_show_results(test_1d_algo,test_1d_hp)
library(devtools)
devtools::test()
devtools::test(pkg="PPCKO")
devtools::test(pkg=as.package(PPCKO))
devtools::test(pkg=as.package("PPCKO"))
devtools::test(PPCKO)
devtools::test("PPCKO")
#to uploda the package
#change here the directory
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PACS/pacs-project/PPCforAutoregressiveOperator")
#then
Rcpp::compileAttributes(".")
