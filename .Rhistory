pgplot <- pgplot +
theme_bw() +
labs(x="", y="En", fill = "Method") +
theme(plot.title = element_text(face="bold", hjust=0.5, size=22),
axis.title.x = element_blank(),
axis.text.y = element_text(size=22),
axis.title.y = element_text(size=22))
quartz()
print(pgplot)
{
title = "KO_en_comp_2d"
ggsave(filename = paste0(title,".pdf"),
plot = pgplot,
device = NULL,
path = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/Tesi/Functional_time_series/Test_domain2D/Artificial_data/results",
scale = 1,
width = 14,
height = 10,
dpi = 300)
}
# PPC KO En boxplot
N = length(err_sim_KO_scattered$rn)
err_ko_en <- c(err_PPCKO$en,err_sim_KO_scattered$en)
method <- rep(c("KO","KO_scat"), each=N)
KO_en <- data.frame(method, err_ko_en)
method_order<- c("KO","KO_scat")
KO_en.box <- KO_en %>% mutate(method=factor(x=method, levels=method_order))
pgplot <- ggplot(KO_en.box, aes(x=method, y=err_ko_en, fill=method)) +
geom_boxplot() + ggtitle("KO comparison")
pgplot <- pgplot +
theme_bw() +
labs(x="", y="En", fill = "Method") +
theme(plot.title = element_text(face="bold", hjust=0.5, size=22),
axis.title.x = element_blank(),
axis.text.y = element_text(size=22),
axis.title.y = element_text(size=22))
quartz()
print(pgplot)
{
title = "KO_en_comp_2d"
ggsave(filename = paste0(title,".pdf"),
plot = pgplot,
device = NULL,
path = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/Tesi/Functional_time_series/Test_domain2D/Artificial_data/results",
scale = 1,
width = 14,
height = 10,
dpi = 300)
}
# PPCKO Rn boxplot
N = length(err_sim_KO_scattered$rn)
err_ko_rn <- c(err_PPCKO$rn,err_sim_KO_scattered$rn)
method <- rep(c("KO","KO_scat"), each=N)
KO_rn <- data.frame(method, err_ko_rn)
method_order<- c("KO","KO_scat")
KO_rn.box <- KO_rn %>% mutate(method=factor(x=method, levels=method_order))
pgplot <- ggplot(KO_rn.box, aes(x=method, y=err_ko_rn, fill=method)) +
geom_boxplot() + ggtitle("KO comparison")
pgplot <- pgplot +
theme_bw() +
labs(x="", y="Rn", fill = "Method") +
theme(plot.title = element_text(face="bold", hjust=0.5, size=22),
axis.title.x = element_blank(),
axis.text.y = element_text(size=22),
axis.title.y = element_text(size=22))
quartz()
print(pgplot)
{
title = "KO_rn_comp_2d"
ggsave(filename = paste0(title,".pdf"),
plot = pgplot,
device = NULL,
path = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/Tesi/Functional_time_series/Test_domain2D/Artificial_data/results",
scale = 1,
width = 14,
height = 10,
dpi = 300)
}
rm(list=ls())
graphics.off()
cat("\014")
load("~/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local2/X.sample.Rdata")
load(X.sample.Rdata)
load("X.sample.Rdata")
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local2")
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
m=PPCKO.local2::PPC_KO(X.sample, "NoCV",k=2)
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
m=PPCKO.local2::PPC_KO(X.sample, "NoCV",k=2)
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
m=PPCKO.local2::PPC_KO(X.sample, "NoCV",k=2)
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
m=PPCKO.local2::PPC_KO(X.sample, "NoCV",k=2)
m=PPCKO.local2::PPC_KO(X.sample, "NoCV",k=0)
#installing the package
Rcpp::compileAttributes("PPCKO.local")
devtools::install("PPCKO.local")
#change here the directory
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local")
#installing the package
Rcpp::compileAttributes("PPCKO.local")
devtools::install("PPCKO.local")
m1=PPCKO.local::PPC_KO(X.sample)
m=PPCKO.local2::PPC_KO(X.sample, "CV_alpha",k=0)
m1=PPCKO.local::PPC_KO(X.sample,"CV_alpha")
m1=PPCKO.local::PPC_KO(X.sample,"CV_alpha",k=1)
m=PPCKO.local2::PPC_KO(X.sample, "CV_alpha",k=1)
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local2")
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
m=PPCKO.local2::PPC_KO(X.sample, "CV_alpha",k=1)
m=PPCKO.local2::PPC_KO(X.sample, "NoCV",k=1)
m=PPCKO.local2::PPC_KO(X.sample, "NoCV",k=0, threshold_ppc = 0.99)
View(m)
m=PPCKO.local2::PPC_KO(X.sample, "NoCV",k=0, threshold_ppc = 0.9999)
View(m)
#to uploda the packages
#change here the directory
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PACS/pacs-project/PPCforAutoregressiveOperator")
#then
Rcpp::compileAttributes(".")
library(devtools)
devtools::install_github("AndreaEnricoFranzoni/PPCforAutoregressiveOperator", force = TRUE)
m_git = PPCKO::PPC_KO(X.sample)
m_git = PPCKO::PPC_KO(X.sample,k=3)
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local2")
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
devtools::test(pkg = "PPCKO.local2")
save(X.sample, file = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local2/data/data_1d.rda")
save(X.sample, file = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local2/PPCKO.local2/data/data_1d.rda")
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
devtools::test(pkg = "PPCKO.local2")
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
devtools::test(pkg = "PPCKO.local2")
library(testthat)
library(yourPackageName)
library(testthat)
library(PPCKO.local2)
test_check("PPCKO.local2")
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
devtools::test(pkg = "PPCKO.local2")
data("data_1d", package = "PPCKO.local2")
data("data_1d", package = "PPCKO.local2")
y=data("data_1d", package = "PPCKO.local2")
y=data(data_1d, package = "PPCKO.local2")
data(data_1d, package = "PPCKO.local2")
data(data_1d.rda, package = "PPCKO.local2")
data("data_1d.rda", package = "PPCKO.local2")
data("data_1d", package = "PPCKO.local2")
load("~/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local2/PPCKO.local2/data/data_1d.rda")
rm(X.sample)
data("data_1d", package = "PPCKO.local2")
rm(list=ls())
graphics.off()
setwd("~/Documents/Politecnico/Magistrale/PACS/pacs-project")
#set working directory to source file location to relay on the functions
wd=getwd()
#functions and utilities needed
source(paste0(wd,"/Data/far_1_generation/requirements.R"))
source(paste0(wd,"/Data/far_1_generation/far_1.R"))
source(paste0(wd,"/Data/far_1_generation/functions.R"))
source(paste0(wd,"/Data/far_1_generation/prediction_error.R"))
rm(wd)
cat("\014")
#data: look at "far_1.R" for this parameters (only four kernels, two norm, three errors implemented)
id_kernel <- "gaussian"   #way of generating data
norm      <- 0.5      #Kernel constant (for the L2 norm of the kernel that has to be <1)
id_noise  <- "1"      #error of the FAR(1) process
proc = feat_far_1_process(id_kernel,norm)
id_kernel   <- proc$kernel
a           <- proc$constant
name_kernel <- proc$name
## Parameters --------------------------------------------------------------------------
n <- 100                  #time instants of the functional temporal series
burnin <- 50              #burnin iterations for FAR(1)
N <- n - burnin
#grid for the FAR(1)
t.grid <- seq(0,1, length.out=200)
s.grid <- seq(0,1, length.out=200)
grid <- expand.grid(t.grid, s.grid)
## Simulate the data
set.seed(23032000)
## 1. Simulate a stationary FAR(1) process according to a specific kernel
X.sample <- far_1(kernel_id = id_kernel, noise_id = id_noise, n = n, t.grid = t.grid, a = a, burnin = burnin)
data_1d = X.sample
save(data_1d, file = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local2/PPCKO.local2/data/data_1d.rda")
rm(list())
rm(list=ls())
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local2")
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
devtools::test(pkg = "PPCKO.local2")
data("data_1d", package = "PPCKO.local2")
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
devtools::test(pkg = "PPCKO.local2")
PPCKO.local2::KO_check_hps(data_1d)
m=PPCKO.local2::KO_check_hps(data_1d)
rm(list=ls())
graphics.off()
cat("\014")
set.seed(23032000)
#change here
dir_w = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/Tesi/Functional_time_series"
source(paste0(dir_w,"/Test_domain2D/Artificial_data/far_1_2d.R"))
source(paste0(dir_w,"/Test_domain2D/Artificial_data/Point_Prediction/CP_point_prediction_2D_FAR_EK.R"))
source(paste0(dir_w,"/Test_domain2D/Artificial_data/Point_Prediction/CP_point_prediction_2D_FAR_oracle.R"))
source(paste0(dir_w,"/Test_domain2D/Artificial_data/Point_Prediction/CP_point_prediction_2D_FAR_VAR.R"))
source(paste0(dir_w,"/Test_domain2D/Artificial_data/Point_Prediction/CP_point_prediction_2D_FARp_oracle.R"))
source(paste0(dir_w,"/Test_domain2D/Artificial_data/functions_scen2sim.R"))
## Data parameters
N = 50
burnin      <- 100
left_ex_x1  <- 0
right_ex_x1 <- 1
left_ex_x2  <- 0
right_ex_x2 <- 1
dim_grid_x1 <- 10
dim_grid_x2 <- 10
{
# grid on x1 and x2
x1.grid = seq(from=left_ex_x1, to=right_ex_x1, length=dim_grid_x1)
x2.grid = seq(from=left_ex_x2, to=right_ex_x2, length=dim_grid_x2)
# number of basis in each domain
nbasis.1.sim = 5
nbasis.2.sim = 5
# total number of tensor product basis
nbasis.sim = nbasis.1.sim*nbasis.2.sim
# type of basis
basis.type = "fourier"
# d = dimension of the underlying VAR(1)
d=nbasis.sim
Psi1=matrix(0.3,d,d)
diag(Psi1)=0.8
Psi1=Psi1/norm(Psi1, type = "F")*0.3
Psi=array(0,c(d,d,1))
Psi[,,1]=Psi1
my_Sigma=matrix(0.6,d,d)
diag(my_Sigma)=1
my_Sigma=my_Sigma/2
}
## simulate data ----
out <- far_1_2D(n = N,
Psi = Psi,
x1.grid = x1.grid,
x2.grid = x2.grid,
nbasis.1 = nbasis.1.sim,
nbasis.2 = nbasis.2.sim,
burnin = burnin,
sigma = my_Sigma,
basis.type = basis.type)
# list of matrices: data
Xt = out$Xt
View(Xt)
rm(list=ls())
graphics.off()
cat("\014")
set.seed(23032000)
#change here
dir_w = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/Tesi/Functional_time_series"
source(paste0(dir_w,"/Test_domain2D/Artificial_data/far_1_2d.R"))
source(paste0(dir_w,"/Test_domain2D/Artificial_data/Point_Prediction/CP_point_prediction_2D_FAR_EK.R"))
source(paste0(dir_w,"/Test_domain2D/Artificial_data/Point_Prediction/CP_point_prediction_2D_FAR_oracle.R"))
source(paste0(dir_w,"/Test_domain2D/Artificial_data/Point_Prediction/CP_point_prediction_2D_FAR_VAR.R"))
source(paste0(dir_w,"/Test_domain2D/Artificial_data/Point_Prediction/CP_point_prediction_2D_FARp_oracle.R"))
source(paste0(dir_w,"/Test_domain2D/Artificial_data/functions_scen2sim.R"))
## Data parameters
N = 20
burnin      <- 100
left_ex_x1  <- 0
right_ex_x1 <- 1
left_ex_x2  <- 0
right_ex_x2 <- 1
dim_grid_x1 <- 10
dim_grid_x2 <- 10
{
# grid on x1 and x2
x1.grid = seq(from=left_ex_x1, to=right_ex_x1, length=dim_grid_x1)
x2.grid = seq(from=left_ex_x2, to=right_ex_x2, length=dim_grid_x2)
# number of basis in each domain
nbasis.1.sim = 5
nbasis.2.sim = 5
# total number of tensor product basis
nbasis.sim = nbasis.1.sim*nbasis.2.sim
# type of basis
basis.type = "fourier"
# d = dimension of the underlying VAR(1)
d=nbasis.sim
Psi1=matrix(0.3,d,d)
diag(Psi1)=0.8
Psi1=Psi1/norm(Psi1, type = "F")*0.3
Psi=array(0,c(d,d,1))
Psi[,,1]=Psi1
my_Sigma=matrix(0.6,d,d)
diag(my_Sigma)=1
my_Sigma=my_Sigma/2
}
## simulate data ----
out <- far_1_2D(n = N,
Psi = Psi,
x1.grid = x1.grid,
x2.grid = x2.grid,
nbasis.1 = nbasis.1.sim,
nbasis.2 = nbasis.2.sim,
burnin = burnin,
sigma = my_Sigma,
basis.type = basis.type)
# list of matrices: data
Xt = out$Xt
data_2d = Xt
save(data_2d, file = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local2/PPCKO.local2/data/data_2d.rda")
x_t = PPCKO.local2::data_2d_wrapper_from_list(data_2d)
m=PPCKO.local2::KO_check_hps_2d(x_t)
m=PPCKO.local2::KO_check_hps_2d(x_t,dim_x1 = 10,dim_x2 = 10)
m=PPCKO.local2::PPC_KO_2d(x_t,num_disc_ev_x1  = 10,num_disc_ev_x2  = 10)
m=PPCKO.local2::PPC_KO_2d(x_t,"CV_alpha",num_disc_ev_x1  = 10,num_disc_ev_x2  = 10,err_ret = 1)
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local2")
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
devtools::test(pkg = "PPCKO.local2")
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PPCforAutoregressiveOperator_local2")
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
devtools::test(pkg = "PPCKO.local2")
#installing the package
Rcpp::compileAttributes("PPCKO.local2")
devtools::install("PPCKO.local2")
devtools::test(pkg = "PPCKO.local2")
rm(list=ls())
graphics.off()
#set working directory to source file location to relay on the functions
wd=getwd()
#functions and utilities needed
source(paste0(wd,"/Data/far_1_generation/requirements.R"))
source(paste0(wd,"/Data/far_1_generation/far_1.R"))
setwd("~/Documents/Politecnico/Magistrale/PACS/pacs-project")
rm(list=ls())
graphics.off()
#set working directory to source file location to relay on the functions
wd=getwd()
#functions and utilities needed
source(paste0(wd,"/Data/far_1_generation/requirements.R"))
source(paste0(wd,"/Data/far_1_generation/far_1.R"))
source(paste0(wd,"/Data/far_1_generation/functions.R"))
source(paste0(wd,"/Data/far_1_generation/prediction_error.R"))
rm(wd)
cat("\014")
#Ko algorithm parameters
id_CV_ko      <- "CV"
threshold_ppc <- 0.95
alpha         <- 0.75
k             <- 0
#data: look at "far_1.R" for this parameters (only four kernels, two norm, three errors implemented)
id_kernel <- "gaussian"   #way of generating data
norm      <- 0.5      #Kernel constant (for the L2 norm of the kernel that has to be <1)
id_noise  <- "1"      #error of the FAR(1) process
proc = feat_far_1_process(id_kernel,norm)
id_kernel   <- proc$kernel
a           <- proc$constant
name_kernel <- proc$name
## Parameters --------------------------------------------------------------------------
n <- 100                  #time instants of the functional temporal series
burnin <- 50              #burnin iterations for FAR(1)
N <- n - burnin
#grid for the FAR(1)
t.grid <- seq(0,1, length.out=200)
s.grid <- seq(0,1, length.out=200)
grid <- expand.grid(t.grid, s.grid)
## 1. Simulate a stationary FAR(1) process according to a specific kernel
X.sample <- far_1(kernel_id = id_kernel, noise_id = id_noise, n = n, t.grid = t.grid, a = a, burnin = burnin)
data_1d = X.sample
data_1d = X.sample
save(data_1d, file = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/PACS/PPCforAutoregressiveOperator/data/data_1d.rda")
save(data_1d, file = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/PACS/pacs-project/PPCforAutoregressiveOperator/data/data_1d.rda")
rm(list=ls())
graphics.off()
cat("\014")
set.seed(23032000)
#change here
dir_w = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/Tesi/Functional_time_series"
source(paste0(dir_w,"/Test_domain2D/Artificial_data/far_1_2d.R"))
source(paste0(dir_w,"/Test_domain2D/Artificial_data/Point_Prediction/CP_point_prediction_2D_FAR_EK.R"))
source(paste0(dir_w,"/Test_domain2D/Artificial_data/Point_Prediction/CP_point_prediction_2D_FAR_oracle.R"))
source(paste0(dir_w,"/Test_domain2D/Artificial_data/Point_Prediction/CP_point_prediction_2D_FAR_VAR.R"))
source(paste0(dir_w,"/Test_domain2D/Artificial_data/Point_Prediction/CP_point_prediction_2D_FARp_oracle.R"))
source(paste0(dir_w,"/Test_domain2D/Artificial_data/functions_scen2sim.R"))
## Data parameters
N = 20
burnin      <- 100
left_ex_x1  <- 0
right_ex_x1 <- 1
left_ex_x2  <- 0
right_ex_x2 <- 1
dim_grid_x1 <- 10
dim_grid_x2 <- 10
{
# grid on x1 and x2
x1.grid = seq(from=left_ex_x1, to=right_ex_x1, length=dim_grid_x1)
x2.grid = seq(from=left_ex_x2, to=right_ex_x2, length=dim_grid_x2)
# number of basis in each domain
nbasis.1.sim = 5
nbasis.2.sim = 5
# total number of tensor product basis
nbasis.sim = nbasis.1.sim*nbasis.2.sim
# type of basis
basis.type = "fourier"
# d = dimension of the underlying VAR(1)
d=nbasis.sim
Psi1=matrix(0.3,d,d)
diag(Psi1)=0.8
Psi1=Psi1/norm(Psi1, type = "F")*0.3
Psi=array(0,c(d,d,1))
Psi[,,1]=Psi1
my_Sigma=matrix(0.6,d,d)
diag(my_Sigma)=1
my_Sigma=my_Sigma/2
}
## simulate data ----
out <- far_1_2D(n = N,
Psi = Psi,
x1.grid = x1.grid,
x2.grid = x2.grid,
nbasis.1 = nbasis.1.sim,
nbasis.2 = nbasis.2.sim,
burnin = burnin,
sigma = my_Sigma,
basis.type = basis.type)
# list of matrices: data
Xt = out$Xt
data_2d = Xt
data_2d = Xt
save(data_1d, file = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/PACS/pacs-project/PPCforAutoregressiveOperator/data/data_2d.rda")
data_2d = Xt
save(data_2d, file = "/Users/andreafranzoni/Documents/Politecnico/Magistrale/PACS/pacs-project/PPCforAutoregressiveOperator/data/data_2d.rda")
rm(list=ls())
load("~/Documents/Politecnico/Magistrale/PACS/pacs-project/PPCforAutoregressiveOperator/data/data_2d.rda")
load("~/Documents/Politecnico/Magistrale/PACS/pacs-project/PPCforAutoregressiveOperator/data/data_1d.rda")
rm(list=ls())
#to uploda the packages
#change here the directory
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PACS/pacs-project/PPCforAutoregressiveOperator")
#then
Rcpp::compileAttributes(".")
#to uploda the packages
#change here the directory
setwd("/Users/andreafranzoni/Documents/Politecnico/Magistrale/PACS/pacs-project/PPCforAutoregressiveOperator")
library(devtools)
devtools::install_github("AndreaEnricoFranzoni/PPCforAutoregressiveOperator", force = TRUE)
devtools::test(pkg = "PPCKO.local2")
rlang::last_trace()
devtools::test(pkg = "PPCKO")
devtools::test()
warnings()
